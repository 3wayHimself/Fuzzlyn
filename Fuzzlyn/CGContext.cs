using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.Linq;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace Fuzzlyn
{
    /// <summary>
    /// Represents context for the code-generator.
    /// </summary>
    internal class CGContext
    {
        public CGContext(FuzzlynOptions options)
        {
            Options = options;
            Random = new Randomizer(options);
        }

        public FuzzlynOptions Options { get; }
        public Randomizer Random { get; }
        public TypeManager Types { get; } = new TypeManager();

        internal void GenerateTypes()
        {
            Types.GenerateTypes(Random);
        }

        public CompilationUnitSyntax OutputProgram()
        {
            CompilationUnitSyntax unit = CompilationUnit();
            unit = unit.WithMembers(Types.OutputTypes().ToSyntaxList());
            unit = unit.WithLeadingTrivia(OutputHeader().Select(Comment));
            return unit;
        }

        private IEnumerable<string> OutputHeader()
        {
            yield return $"// Generated by Fuzzlyn on {DateTime.Now:yyyy-MM-dd HH:mm:ss}";
            yield return $"// Seed: {Random.Seed}";
        }
    }
}
