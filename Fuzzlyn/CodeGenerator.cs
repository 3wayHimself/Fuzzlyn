using Fuzzlyn.Methods;
using Fuzzlyn.Statics;
using Fuzzlyn.Types;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.Linq;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace Fuzzlyn
{
    internal class CodeGenerator
    {
        public CodeGenerator(FuzzlynOptions options)
        {
            Options = options;
            Random = new Randomizer(options);
            Types = new TypeManager(Random);
            Statics = new StaticsManager(Random, Types);
            Methods = new MethodManager(Random, Types, Statics);
        }

        public FuzzlynOptions Options { get; }
        public Randomizer Random { get; }
        public TypeManager Types { get; }
        public StaticsManager Statics { get; }
        public MethodManager Methods { get; }

        internal void GenerateTypes() => Types.GenerateTypes();
        internal void GenerateMethods() => Methods.GenerateMethods();

        public CompilationUnitSyntax OutputProgram(bool includeComments)
        {
            CompilationUnitSyntax unit = CompilationUnit();

            IEnumerable<MemberDeclarationSyntax> types =
                Types.OutputTypes();

            // Append 'Program' class containing statics and methods, followed by main method
            MemberDeclarationSyntax programClass =
                ClassDeclaration("Program")
                .WithMembers(OutputProgramMembers().ToSyntaxList());

            types = types.Concat(new[] { programClass });

            unit = unit.WithMembers(types.ToSyntaxList());
            if (includeComments)
                unit = unit.WithLeadingTrivia(OutputHeader().Select(Comment));

            return unit;
        }

        private IEnumerable<MemberDeclarationSyntax> OutputProgramMembers()
        {
            foreach (FieldDeclarationSyntax stat in Statics.OutputStatics())
                yield return stat;

            List<MethodDeclarationSyntax> methods = Methods.OutputMethods().ToList();

            yield return
                MethodDeclaration(
                    PredefinedType(Token(SyntaxKind.VoidKeyword)),
                    "Main")
                .WithModifiers(TokenList(Token(SyntaxKind.StaticKeyword)))
                .WithBody(
                    Block(
                        ExpressionStatement(
                            InvocationExpression(
                                IdentifierName(methods[0].Identifier)))));

            foreach (MethodDeclarationSyntax method in methods)
                yield return method;
        }

        private IEnumerable<string> OutputHeader()
        {
            yield return $"// Generated by Fuzzlyn on {DateTime.Now:yyyy-MM-dd HH:mm:ss}";
            yield return $"// Seed: {Random.Seed}";
        }
    }
}
